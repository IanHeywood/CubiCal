[data]
_Help			= Visibility data options
ms		        =           # MS name #type:str
column          = DATA      # MS column to read for data #metavar:COLUMN #type:str
time-chunk      = 128       # Chunk data up by this number of timeslots. This limits the amount of data
    processed at once. Smaller chunks allow for a smaller RAM footprint and greater parallelism, but
    this sets an upper limit on the solution intervals that may be employed. #metavar:timeslots #type:int
freq-chunk      = 64        # Chunk data by this number of channels. #metavar:channels #type:int
chunk-by        = SCAN_NUMBER  # If set, then time chunks will be broken up whenever the value in the named column(s)
    jumps by >JUMPSIZE. Multiple column names may be given, separated by commas. Use None to disable. #metavar:COLUMNS
chunk-by-jump   = 1            # The jump size. If 0, then any change in value is a jump. If e.g. 1, then the change
    must be >1. #metavar:JUMPSIZE #type:float
single-chunk    =              # If set, processes just one chunk of data matching the chunk ID. Useful for debugging.

[sel]
_Help = Data selection options
field                  = 0             # FIELD_ID to read. #metavar:FIELD #type:int
ddid                   = None          # DATA_DESC_IDs to read. Default reads all. Can be specified as e.g. "5",
    "5,6,7", 5~7" (inclusive range), "5:8" (exclusive range), "5:" (from 5 to last). #metavar:DDID
taql                   =               # additional TaQL selection string #metavar:TaQL #type:str
chan                   =               # Channels to read (within each DDID). Default reads all. Can be specified as e.g. "5",
    "10~20" (10 to 20 inclusive), "10:21" (same), "10:" (from 10 to end), ":10" (0 to 9 inclusive),
    "~9" (same). #metavar:CHANNELS

[model]
_Help			= Calibration model options
list            =               # predict model visibilities from given LSM (using Montblanc). #metavar:FILENAME #type:str
ddes            = 1             # use DDEs, if model is directional. Set to 0 to disable. #type:bool
beam-pattern	= None		    # Apply beams if specified eg. 'beam_$(corr)_$(reim).fits' or 'beam_$(CORR)_$(REIM).fits'
beam-l-axis		= None
beam-m-axis		= None

[montblanc] 
_Help			= Montblanc simulation options 
device-type		= CPU # Use CPU or GPU for simulation. #options:CPU|GPU
dtype			= float # Precision for simulation. #options:float|double #type:str
feed-type		= linear # Simulate using linear or circular feeds. #options:linear|circular
mem-budget		= 1024 # Memory budget in MB for simulation. #type:int
log-level       = WARNING # Montblanc log level #metavar:LEVEL #options:DEBUG|INFO|WARNING|ERROR

[weight]
_Help			= Weighting options
column          = WEIGHT_SPECTRUM   # column to read weights from

[flags]
_Help			= Flagging options
apply             = legacy
auto-init         = legacy     # insert BITFLAG column if missing, and initialize named flagset from FLAG/FLAG_ROW
save              = cubical    # save flags to named flagset in BITFLAG. If none or 0, doesn't save
reinit-bitflags   = 0          # if true, reninitializes BITFLAG column from scratch. Useful if you ended up with a dead one. #type:bool
tf-chisq-median   = 1.2
tf-np-median      = 0.5
time-density      = 0.5
chan-density      = 0.5
ddid-density      = 0.5

[sol]
_Help			 = Solution options which apply at the solver level.
jones            = G             # comma-separated list of Jones terms to enable (matching --j1-label, --j2-label, etc.)
precision        = 32            # Solve in single or double precision #options:32|64
delta-g          = 1e-6
delta-chi        = 1e-6
chi-int          = 5
last-rites       = 1    # Re-estimate chi^2 and noise at the end of a solution cycle. Disabling last rites can save a bit of time, but makes the post-solution stats less informative. #type:bool
stall-quorum	 = 0.99 # Minimum percentage of stalled solutions to accept.
min-bl           = 0    # Min baseline length to solve for #metavar:METERS #type:float
max-bl           = 0    # Max baseline length to solve for. If 0, no maximum is applied. #metavar:METERS #type:float
subset           =      # Additional subset of data to actually solve for. Any TaQL string may be used. #metavar:TaQL #type:str

[bbc]
_Help            = Options for baseline-based corrections (a.k.a. BBCs, a.k.a. interferometer gains).
load-from        =    # load and apply BBCs computed in a previous run. Apply with care! This will tend
    to suppress all unmodelled flux towards the centre of the field. #metavar:FILENAME
apply-2x2        = 0  # Apply full 2x2 BBCs (as opposed to diagonal-only). Only enable this if you really trust the
    polarisation information in your sky model. #type:bool
save-to          = {data[ms]}/BBC-field:{sel[field]} # compute suggested BBCs at end of run, and save them to the given database.
    It can be useful to have this always enabled, since the BBCs provide useful diagnostics of the solution
    quality (and are not actually applied without a load-from setting). #metavar:FILENAME
per-chan         = 1  # Compute BBCs per-channel (else across entire band). #type:bool

[dist]
_Help			= Parallelization and distribution options
ncpu            = 0                 # number of CPUs to use (0 or 1 disables parallelism) #type:int
min-chunks      = 32                # minimum number of chunks to load into memory at once

[out]
_Help			= Options for output products
name		    = cubical           # Base name of output files. #metavar:BASENAME #type:str
mode            = sc                # Operational mode.
    [so] solve only;
    [sc] solve and generate corrected visibilities;
    [sr] solve and generate corrected residuals;
    [ss] solve and generate uncorrected residuals;
    [ac] apply solutions, generate corrected visibilities;
    [ar] apply solutions, generate corrected residuals;
    [as] apply solutions, generate uncorrected residuals
    #options:so|sc|sr|ss|ac|ar|as
column          = CORRECTED_DATA    # Output MS column name (if not solve-only mode)
plots           = 1                 # Generate summary plots. #type:bool
plots-show      = 1                 # Show summary plots interactively. #type:bool


[log]
_Help = Options related to logging
memory 			= 1      # log memory use #type:bool
boring 			= 0      # disable progress bars and other pretty console output #type:bool
append 			= 0      # append to log file if it exists (default truncates) #type:bool

[debug]
_Help = Debugging options for the discerning masochist
verbose = 0              # Output verbosity level. #type:int #metavar:LEVEL
pdb = 0                  # Jumps into pdb on error. #type:bool

[misc]
_Help             = Miscellaneous options
random-seed       = None         # seed random number generator with explicit seed, if given. Useful for reproducibility
		   		  of the random-based optimizations (sparsification, etc.). #metavar:N
parset-version    = 0.1          # parset version number, for migration purposes. Can't be specified on command line. #no_cmdline:1

[j1]
_Help = Options related to the first (leftmost) term in the Jones chain.
solvable 	= 1			# Determines whether CubiCal will solve for this gain. Used in conjuction with
						load-from. #type:bool
label       = G         # Jones matrix label #metavar:LABEL
type        = complex-2x2   # Type of Jones matrix to solve for #options:complex-2x2|phase-diag|robust-2x2|f-slope|t-slope|tf-plane
    Note that if multiple Jones terms are enabled, then only complex-2x2 is supported (for now)
load-from   =           # Load solutions from given database. By default, the Jones matrix label is used to
    form up parameter names, but his may be overridden by adding "//LABEL" to the database filename.
    #metavar:FILENAME[//LABEL]
save-to     = {data[ms]}/G-field:{sel[field]}  # save solutions to given database #metavar:FILENAME
dd-term 	= 0			# Determines whether this term is direction dependent. #type:bool
update-type = full 		# Determines update type for Jones chain functionality. Full is the default behaviour,
						phase-diag normalises the on-diagonal term and discards the off-diagonals, diag discards the off diagonal terms. #options:full|phase-diag|diag|amp-diag
time-int    = 1			# Time solution interval for this term. #metavar:TIMESLOTS
freq-int    = 1			# Frequency solution interval for this term. #metavar:CHANNELS
clip-low    = .1   		# amplitude clipping: flag solutions with diagonal amplitudes below this value. #metavar:AMPL
						#type:float
clip-high   = 10   		# amplitude clipping: flag solutions with any amplitudes above this value. #metavar:AMPL 
						#type:float
clip-after  = 5			# Number of iterations after which to clip this gain. #metavar:NITER #type:int
max-iter    = 200		# Maximum number of iterations spent on this term. #metavar:NITER
conv-quorum = 0.99		# Minimum percentage of converged solutions to accept. #metavar:FRACTION
term-iters	= 2			# Number of iterations to perform on this term before switching to the next. Must be even. #metavar:NITER
ref-ant		= None		# Reference antenna - its phase is guaranteed to be zero. #metavar:ANTENNA

[j2]
_Help = Options related to the second (from the left) term in the Jones chain.
solvable 	= 1			# Determines whether CubiCal will solve for this gain. Used in conjuction with
						load-from. #type:bool
label       = B         # Jones matrix label
type        = complex-2x2   # Type of Jones matrix to solve for #options:complex-2x2|phase-diag|robust-2x2|f-slope|tf-plane
    Note that if multiple Jones terms are enabled, then only complex-2x2 is supported (for now)
load-from   =           # Load solutions from given database
save-to     = {data[ms]}/B-field:{sel[field]}  # save solutions to given database
dd-term 	= 0			# Determines whether this term is direction dependent. #type:bool
update-type = full 		# Determines update type for Jones chain functionality. Full is the default behaviour,
						phase-diag normalises the on-diagonal term and discards the off-diagonals, diag discards the off diagonal terms. #options:full|phase-diag|diag|amp-diag
time-int    = 1			# Time solution interval for this term.
freq-int    = 1			# Frequency solution interval for this term.
clip-low    = .1   		# amplitude clipping: flag solutions with diagonal amplitudes below this value. #metavar:AMPL
						#type:float
clip-high   = 10   		# amplitude clipping: flag solutions with any amplitudes above this value. #metavar:AMPL 
						#type:float
clip-after  = 5			# Number of iterations after which to clip this gain. #metavar:NITER #type:int
max-iter    = 200		# Maximum number of iterations spent on this term.
conv-quorum = 0.99		# Minimum percentage of converged solutions to accept.
term-iters	= 2			# Number of iterations to perform on this term before switching to the next. Must be even.
ref-ant		= None		# Reference antenna - its phase is guaranteed to be zero.

[j3]
_Help = Options related to the third (from the left) term in the Jones chain.
solvable 	= 1			# Determines whether CubiCal will solve for this gain. Used in conjuction with
						init-from. #type:bool
label       = dE        # Jones matrix label
type        = complex-2x2   # Type of Jones matrix to solve for #options:complex-2x2|phase-diag|robust-2x2|f-slope|tf-plane
    Note that if multiple Jones terms are enabled, then only complex-2x2 is supported (for now)
load-from   =           # Load solutions from given database
save-to     = {data[ms]}/dE-field:{sel[field]}  # save solutions to given database
dd-term 	= 1			# Determines whether this term is direction dependent. #type:bool
update-type = full 		# Determines update type for Jones chain functionality. Full is the default behaviour,
						phase-diag normalises the on-diagonal term and discards the off-diagonals, diag discards the off diagonal terms. #options:full|phase-diag|diag|amp-diag
time-int    = 1			# Time solution interval for this term.
freq-int    = 1			# Frequency solution interval for this term.
clip-low    = .1   		# amplitude clipping: flag solutions with diagonal amplitudes below this value. #metavar:AMPL
						#type:float
clip-high   = 10   		# amplitude clipping: flag solutions with any amplitudes above this value. #metavar:AMPL 
						#type:float
clip-after  = 5			# Number of iterations after which to clip this gain. #metavar:NITER #type:int
max-iter    = 200		# Maximum number of iterations spent on this term.
conv-quorum = 0.99		# Minimum percentage of converged solutions to accept.
term-iters	= 2			# Number of iterations to perform on this term before switching to the next. Must be even.
ref-ant		= None		# Reference antenna - its phase is guaranteed to be zero.

##  * ``DefaultParset.cfg`` now contains comment clauses which are auto-parsed into documentation by ``ReadCfg.py``, and
##  automatically converted into OptionParser command-line arguments. 
##
##  * Command-line arguments are formed as ``--Section-OptionName``.
##
##  * Each section can contain a ``_Help = section description`` option. This is turned into a docstring for the section.
##
##  * Each option line can contain a comment, preceded by "#". This is turned into a docstring for the option. Note that
##  long comments can be continued on the next line simply by indenting the next line. 
##
##  * Option comments can have embedded attributes of the form ``#attr:value``. These are removed from the docstring 
##  automatically. All attributes are optional! A few attributes have special meaning, as per below. 
##
##  * ``#type:TYPE`` forces the option to be interpreted as a specific Python type. E.g. ``#type:bool``, ``#type:str``,
##  ``#type:float``. In the absence of an explicit type attribute, the option will be parsed into a valid Python value 
##  (using ``eval()``), and converted into a string if that fails. This means that e.g. "None" will be interpreted as 
##  ``None`` and not the string ``"None"``. Note that this mechanism has some pitfalls: for example "all" gets parsed 
##  into the built-in ``all()`` function (unless surrounded by quotes), so if you want to make sure an option is treated 
##  as a string, make sure you add a ``#type:str`` attribute. 
##
##  * ``#options:A|B|C`` specifies that the option is a "selector" with a fixed set of values. See, for example, 
##  ``#options:None|LOFAR|FITS`` in BeamModel. 
##
##  * ``#metavar:VAR`` is passed to the metavar argument of ``OptionParser.add_option()``. This makes for a nicer-looking
##   command-line help. E.g. ``#metavar:MHz``. 
##
##  * ``#cmdline-only:1`` specifies that the option can only be changed from the command-line, not via a parset. 
##
##  * Options can have aliases. *NB: I'm not convinced about this feature. Maybe it makes things too confusing and should
##   be removed.* For example, 
##
##  ```
##  [Caching]
##  PSF|CachePSF            = 1         # Cache PSF data. May be expensive with large images, hence optional #type:bool
##  ```
##
##  means that the command-line option can be specified as ``--Caching-PSF`` or ``--CachePSF``. The second form is the 
##  "global alias". The GD object in DDFacet will contain both ``GD["Caching"]["PSF"]`` and 
##  ``GD["Caching"]["CachePSF"]``, set to the same value.
