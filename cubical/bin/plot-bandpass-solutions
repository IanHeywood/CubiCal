#!/usr/bin/env python
from __future__ import print_function
import os.path
import pylab

from cubical.plots import gainsols

if __name__ == "__main__":

    _, scriptname = os.path.split(__file__)

    if scriptname.startswith("plot-gain"):
        gain, bandpass = True, False
        default_plot = "gain (or bandpass)"
        label = "G"
    else:
        gain, bandpass = False, True
        default_plot = "bandpass (or gain)"
        label = "B"

    import argparse

    parser = argparse.ArgumentParser(description="""Makes plots of {} solutions""".format(default_plot),
                                     formatter_class=argparse.RawTextHelpFormatter)

    parser.add_argument("-d", "--display", action="store_true", help="Display plots rather than saving them")

    parser.add_argument("-o", "--output-name", type=str, metavar="FILENAME", help="Output filename")

    parser.add_argument("--label", type=str, metavar="LABEL", default=label, help="Parameter label (default %(default)s)")

    parser.add_argument("-G", "--gain", action="store_true", help="Plot as time-variable gains")

    parser.add_argument("-B", "--bandpass", action="store_true", help="Plot as bandpasses")

    parser.add_argument("--diag", type=str, choices=("ri", "ap"), default='ap', help="Plot diagonal elements as real/imag or amp/phase")

    parser.add_argument("--off-diag", type=str, choices=("ri", "ap"), help="Also plot off-diagonal elements as real/imag or amp/phase")

    # populate remaining parser options from standard object
    gainsols.options.populate_argparse(parser)

    parser.add_argument("files", nargs="+",
                         help="""One or more CubiCal solution databases""")

    options = gainsols.options = parser.parse_args()

    gain = gain or options.gain
    bandpass = bandpass or options.bandpass
    both = gain and bandpass

    for filename in options.files:
        figtitle = filename

        print("Trying to read {} from CubiCal database {}".format(options.label, filename))
        bb = gainsols.read_cubical_gains(filename, options.label)

        if gain:
            fig = gainsols.plot_bandpass_cc(bb, figtitle=figtitle, plot_diag=options.diag, plot_offdiag=options.off_diag)
            output_name = options.output_name or filename + (".gain.png" if both else ".png")
            if not options.display:
                fig.savefig(output_name, dpi=options.dpi, bbox_inches='tight')

        if bandpass:
            fig = gainsols.plot_bandpass_cc(bb, figtitle=figtitle, plot_diag=options.diag, plot_offdiag=options.off_diag)
            output_name = options.output_name or filename + (".bandpass.png" if both else ".png")
            if not options.display:
                fig.savefig(output_name, dpi=options.dpi, bbox_inches='tight')

    if options.display:
        pylab.show()