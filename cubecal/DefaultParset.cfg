[Data]
_Help			= Visibility data options
MS		        =    # Single MS name, or list of comma-separated MSs, or name of *.txt file listing MSs. #metavar:MS(s) #global:MS
    			       Note that each MS may also be specified as a glob pattern (e.g. *.MS), and may be suffixed with "//Dx" and/or "//Fy"
    			       to select specific DATA_DESC_ID and FIELD_IDs in the MS. "x" and "y" can take the form of a single number, a
    			       Pythonic range (e.g. "0:16"), an inclusive range ("0~15"), or "*" to select all. E.g. "foo.MS//D*//F0:2" selects all
    			       DDIDs, and fields 0 and 1 from foo.MS. If D and/or F is not specified, --Selection-Field and --Selection-DDID
			       is used as the default.
Column          = DATA      # MS column to read for data    #metavar:COLUMN #type:str
TimeChunk       = 1
FreqChunk       = 1
SingleChunk     =

[Selection]
_Help = Data selection options
Field                  = 0             # default FIELD_ID to read. #metavar:FIELD #type:int
DDID                   = None          # default DATA_DESC_ID to read. #metavar:DDID
TaQL                   =               # additional TaQL selection string #metavar:TaQL #type:str
DDID_TO                = None          # If set, reads from DDID to DDID_TO (inclusive) #metavar:DDID

[Model]
_Help			= Calibration model options
LSM             =                 # predict model visibilities from given LSM (using Montblanc). #metavar:FILENAME #type:str
Column          = MODEL_DATA      # read additional model visibilities from given MS column.
DDEs            = 0               # use DDEs (--Model-LSM must be set).

[Weight]
Column          = WEIGHT_SPECTRUM

[Flags]
Apply           = 0
ApplyBitmask    = 0

[Solution]
Precision       = 32    # Work in single or double precision #options:32|64
TimeInt         = 1
FreqInt         = 1
MaxIter         = 200
DeltaG          = 1e-6
DeltaChi        = 1e-5
ChiInt          = 5

[Parallel]
NCPU            = 0                 # number of CPUs to use (0 or 1 disables parallelism) #type:int

[Output]
_Help			= Options for output products
Clobber         = 0                 # Allow overwriting of existing parset etc. (can't be specified via parset!) #type:bool #cmdline_only:1
Name		    = cubecal           # Base name of output files. #metavar:BASENAME #type:str
Vis             = corrected         # Save what visibilities to MS. #options:None|corrected|residual
Column          = CORRECTED_DATA    # Output MS column name for --Output-Vis.
NoisePlots      = 0                 # Generate noise plots. #type:bool

[Log]
_Help = Options related to logging
Memory 			= 0      # log memory use #type:bool
Boring 			= 0      # disable progress bars and other pretty console output #type:bool
Append 			= 0      # append to log file if it exists (default truncates) #type:bool

[Debug]
_Help = Debugging options for the discerning masochist
Verbose = 0              # Output verbosity level. #type:int #metavar:LEVEL

[Misc]
_Help            = Miscellaneous options
RandomSeed       = None         # seed random number generator with explicit seed, if given. Useful for reproducibility
		   		  of the random-based optimizations (sparsification, etc.). #metavar:N
ParsetVersion    = 0.1          # parset version number, for migration purposes. Can't be specified on command line. #no_cmdline:1



##  * ``DefaultParset.cfg`` now contains comment clauses which are auto-parsed into documentation by ``ReadCfg.py``, and
##  automatically converted into OptionParser command-line arguments. 
##
##  * Command-line arguments are formed as ``--Section-OptionName``.
##
##  * Each section can contain a ``_Help = section description`` option. This is turned into a docstring for the section.
##
##  * Each option line can contain a comment, preceded by "#". This is turned into a docstring for the option. Note that
##  long comments can be continued on the next line simply by indenting the next line. 
##
##  * Option comments can have embedded attributes of the form ``#attr:value``. These are removed from the docstring 
##  automatically. All attributes are optional! A few attributes have special meaning, as per below. 
##
##  * ``#type:TYPE`` forces the option to be interpreted as a specific Python type. E.g. ``#type:bool``, ``#type:str``,
##  ``#type:float``. In the absence of an explicit type attribute, the option will be parsed into a valid Python value 
##  (using ``eval()``), and converted into a string if that fails. This means that e.g. "None" will be interpreted as 
##  ``None`` and not the string ``"None"``. Note that this mechanism has some pitfalls: for example "all" gets parsed 
##  into the built-in ``all()`` function (unless surrounded by quotes), so if you want to make sure an option is treated 
##  as a string, make sure you add a ``#type:str`` attribute. 
##
##  * ``#options:A|B|C`` specifies that the option is a "selector" with a fixed set of values. See, for example, 
##  ``#options:None|LOFAR|FITS`` in BeamModel. 
##
##  * ``#metavar:VAR`` is passed to the metavar argument of ``OptionParser.add_option()``. This makes for a nicer-looking
##   command-line help. E.g. ``#metavar:MHz``. 
##
##  * ``#cmdline-only:1`` specifies that the option can only be changed from the command-line, not via a parset. 
##
##  * Options can have aliases. *NB: I'm not convinced about this feature. Maybe it makes things too confusing and should
##   be removed.* For example, 
##
##  ```
##  [Caching]
##  PSF|CachePSF            = 1         # Cache PSF data. May be expensive with large images, hence optional #type:bool
##  ```
##
##  means that the command-line option can be specified as ``--Caching-PSF`` or ``--CachePSF``. The second form is the 
##  "global alias". The GD object in DDFacet will contain both ``GD["Caching"]["PSF"]`` and 
##  ``GD["Caching"]["CachePSF"]``, set to the same value.
